:where(.wheel-container) {
    --_items: 8;  /* Custom property for the number of items in the wheel */
    all: unset;  /* Resets all inherited properties */
    aspect-ratio: 1 / 1;  /* Ensures the wheel is always circular */
    container-type: inline-size;  /* Experimental CSS property, may not be widely supported */
    direction: ltr;  /* Text direction, irrelevant here but sets the default */
    display: grid;  /* Uses CSS Grid layout */
    position: relative;  /* Positioning context for absolutely positioned children */
    width: 100%;  /* Makes the wheel responsive to its container's width */
  
    & > * { position: absolute; }

    button {
        aspect-ratio: 1 / 1;  /* Keeps the button circular */
        background: shsla(0, 0%, 100%, 0.8);  /* Semi-transparent white background */
        border: 0;  /* No border */
        border-radius: 50%;  /* Makes the button round */
        cursor: pointer;  /* Cursor indicates the button is clickable */
        font-size: 5cqi;  /* Large font size based on a custom unit */
        place-self: center;  /* Centers the button within its container */
        width: 20cqi;  /* Custom width */
    }

    .wheel {
        all: unset;  /* Resets all inherited properties */
        clip-path: inset(0 0 0 0 round 50%);  /* Creates a circular clipping path for the list */
        display: grid;  /* Uses grid layout for its children (list items) */
        inset: 0;  /* Shorthand for positioning at all four corners */
        place-content: center start;  /* Aligns content within the grid */
  
        .slice  {
            align-content: center;  /* Centers content vertically within the grid area */
            aspect-ratio: 1 / calc(2 * tan(180deg / var(--_items)));  /* Aspect ratio based on the number of items */
            background: hsl(calc(360deg / var(--_items) * calc(var(--_idx))), 100%, 75%);  /* Dynamic color assignment */
            clip-path: polygon(0% 0%, 100% 50%, 0% 100%);  /* Shapes each item into a fan or sector shape */
            display: grid;  /* Enables grid layout within each list item */
            font-size: 5cqi;  /* Sets font size based on custom unit */
            grid-area: 1 / -1;  /* Positions item in the grid */
            padding-left: 1ch;  /* Padding to offset text slightly */
            rotate: calc(360deg / var(--_items) * calc(var(--_idx) - 1));  /* Rotates each item to form a circular wheel */
            transform-origin: center right;  /* Ensures rotation occurs from the center-right of each item */
            user-select: none;  /* Disables text selection for better UX */
            width: 50cqi;  /* Sets a custom width */
  
            &:nth-of-type(1) { --_idx: 1; }
            &:nth-of-type(2) { --_idx: 2; }
            &:nth-of-type(3) { --_idx: 3; }
            &:nth-of-type(4) { --_idx: 4; }
            &:nth-of-type(5) { --_idx: 5; }
            &:nth-of-type(6) { --_idx: 6; }
            &:nth-of-type(7) { --_idx: 7; }
            &:nth-of-type(8) { --_idx: 8; }
            &:nth-of-type(9) { --_idx: 9; }
            &:nth-of-type(10) { --_idx: 10; }
            &:nth-of-type(11) { --_idx: 11; }
            &:nth-of-type(12) { --_idx: 12; }

            .mini-slices {
                display: grid;
                grid-template-rows: repeat(10, 1fr); /* Changed to grid rows */
                width: 50%;
                height: 100%;
                transform-origin: center right; /* Ensure correct rotation and alignment */
            }

            .mini-slices li {
                display: flex;
                align-items: center;
                justify-content: center;
                background-color: hsla(0, 0%, 100%, 0.2);
                font-size: 0.8em;
                color: white;
                cursor: pointer;
                user-select: none;
                width: 100%;
                height: 10%; /* Adjust height to fit within the slice */
                text-align: center;
            }

            .mini-slices li:hover {
                background-color: hsla(0, 0%, 100%, 0.5);
            }
            
            /* Styling the wheel's numbers */
            .mini-slices li::after {
                content: attr(data-value);
                color: white;
            }

        }
    }
}
  